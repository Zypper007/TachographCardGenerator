using System;
using System.Collections.Generic;
using System.Linq;

namespace TachographCardStructure
{
    public class TestFile : IToByte
    {
        public CardIccIdentification EF_ICC { get; set; } = new CardIccIdentification();
        public CardChipIdentification EF_IC { get; set; } = new CardChipIdentification();

        public CertificateG1 CardCertyficate { get; set; } = new CertificateG1(
            new byte[] { 0xC1, 0x00 },
            0x00,
            new byte[128] {
                0x94, 0xAA, 0xA8, 0xF1, 0x7A, 0x37, 0x89, 0xD5, 0xED, 0x87, 0x11, 0xCF, 0xBA, 0x78, 0xE8, 0x25,
                0x5E, 0x89, 0x1A, 0x91, 0x8E, 0xB4, 0xF1, 0x80, 0xF3, 0x83, 0xA6, 0xE8, 0x4D, 0xF1, 0x18, 0x2F,
                0xD6, 0x8A, 0x2E, 0x25, 0xF0, 0xF9, 0x33, 0xF6, 0x7C, 0x9E, 0x4C, 0xEA, 0x58, 0xA2, 0xBC, 0x7C,
                0xD5, 0xAB, 0xDA, 0xA8, 0x05, 0x74, 0x47, 0x7D, 0x5B, 0x45, 0x60, 0xE4, 0x27, 0x7A, 0xF1, 0xA9,
                0x59, 0x36, 0x3B, 0xA5, 0x55, 0xC9, 0x50, 0x6F, 0x5A, 0x0C, 0x29, 0x5A, 0xAA, 0x96, 0xE8, 0x63,
                0x2A, 0x2C, 0xF5, 0xD1, 0x2E, 0x96, 0xE1, 0x31, 0x85, 0xEF, 0x4D, 0xAC, 0x6D, 0x10, 0xA3, 0xE4,
                0xEF, 0x50, 0xDF, 0x5F, 0xEE, 0x34, 0xB4, 0xFF, 0xB4, 0x2E, 0x79, 0x67, 0x47, 0xDB, 0x08, 0x52,
                0x8D, 0xA2, 0xD9, 0xDC, 0x7D, 0x52, 0xFD, 0x4A, 0x0E, 0x6E, 0x49, 0xBC, 0xE4, 0x82, 0xA0, 0xC4 },

            new byte[58] {
                0x92, 0x0B, 0x2F, 0x24, 0x53, 0xA2, 0x76, 0x3C, 0x90, 0x60, 0xA8, 0x71, 0xA5, 0xD7, 0x81, 0x49,
                0xB4, 0xE5, 0x94, 0x45, 0xFA, 0xA2, 0xC8, 0x21, 0x68, 0x1D, 0xD2, 0x18, 0x42, 0x2C, 0xC0, 0x9B,
                0x70, 0x55, 0x13, 0x90, 0x29, 0x46, 0x42, 0xB6, 0x7B, 0xA6, 0x09, 0x29, 0x36, 0xC1, 0x4A, 0x7C,
                0xE2, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01 },

            new byte[8] {
                0x28, 0x50, 0x4C, 0x20, 0x08, 0xFF, 0xFF, 0x01 } 
        );

        public CertificateG1 CA_Certificate { get; set; } = new CertificateG1(
            new byte[] { 0xC1, 0x08 },
            0x00,
            new byte[128] {
                0x25, 0xD8, 0xC2, 0x90, 0x81, 0x05, 0xBC, 0x1A, 0x57, 0xFC, 0x15, 0x75, 0x4B, 0x4D, 0xE6, 0xF5,
                0xA4, 0x45, 0x01, 0xF0, 0xE0, 0xC7, 0x4C, 0x8A, 0x33, 0xF0, 0xEF, 0x2B, 0x96, 0x92, 0xDC, 0x61,
                0xD9, 0x9F, 0xB0, 0xE2, 0x0D, 0xA9, 0xA9, 0x1B, 0xEC, 0x9C, 0x3A, 0x36, 0x19, 0xFB, 0x56, 0x74,
                0x6F, 0x93, 0x10, 0xF1, 0x59, 0x58, 0x1F, 0x30, 0x5D, 0x2E, 0x0A, 0x57, 0x3D, 0xAA, 0x47, 0xA6,
                0x02, 0x67, 0x68, 0x78, 0x4D, 0x58, 0xB2, 0x49, 0xD7, 0x9E, 0x93, 0x60, 0xD4, 0xEB, 0x4D, 0x4A,
                0x68, 0x32, 0x5D, 0x6C, 0x64, 0x4B, 0x05, 0x98, 0xD5, 0xD3, 0xE4, 0xCA, 0x19, 0x7F, 0xFE, 0x29,
                0x18, 0xAC, 0x67, 0xD2, 0xAD, 0x02, 0x60, 0x2B, 0xCF, 0x91, 0x0C, 0x66, 0x93, 0x30, 0xDE, 0x05,
                0x61, 0x84, 0xFD, 0x6F, 0x43, 0x3F, 0x66, 0xE4, 0x3A, 0x41, 0x3C, 0x41, 0x0F, 0x1F, 0xF1, 0x48 },

            new byte[58] {
                0x69, 0xA6, 0x68, 0xF3, 0x2C, 0x1B, 0xCE, 0x35, 0xA0, 0xED, 0xD8, 0xBA, 0xB9, 0xF8, 0xF4, 0x72,
                0xA4, 0x1C, 0xA6, 0x19, 0x93, 0x3E, 0x48, 0xD1, 0xDD, 0xCE, 0x25, 0xF0, 0x1F, 0x92, 0xB2, 0x72,
                0x96, 0x47, 0x5D, 0x62, 0xD0, 0xC2, 0xFB, 0x2C, 0x55, 0x91, 0x06, 0x6B, 0xBD, 0x83, 0x08, 0x3E,
                0x66, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01 },

            new byte[8] { 0xFD, 0x45, 0x43, 0x20, 0x00, 0xFF, 0xFF, 0x01 }
        );

        /*public EF_ICC EF_ICC;
        public EF_IC EF_IC;
        public EF_DIR EF_DIR;
        public EF_ATR EF_ATR; //INFO
        public EF_EXTENDED_LENGTH EF_EXTENDED_LENGTH;
        public EF_EXTENDED_LENGTH EF_EXTENDED_LENGTH;*/

        public byte[] ToByte()
        {
            var bytes = new List<byte>();
            var ef_icc_bytes = EF_ICC.ToByte();

            return bytes.Concat(ef_icc_bytes).ToArray();
        }
    }
}
